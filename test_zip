#!/usr/bin/python

# Copyright (c) 2011 Aleksander B. Demko
# This source code is distributed under the MIT license.
# See the accompanying file LICENSE.MIT.txt for details.

import os
import os.path
import zipfile

print 'testing all zip files in . (recursivly)'

def add_zip(zipname):
  global ZipFiles
  ZipFiles[zipname] = 1

def check_zip_old(zipname):
  global Errors
  print 'checking ', zipname
  z = zipfile.ZipFile(zipname, 'r')
  if z.testzip() != None:
    Errors.append(zipname)
    print 'BAD -- ', zipname

def check_zip(zipname):
  global Errors
  print 'checking ', zipname
  id = os.fork()
  if id == 0:
    os.execlp('unzip', '-q', '-q', '-q', '-t', zipname)
  (pid, stat) = os.wait()
  if stat != 0:
    Errors.append(zipname)
    print 'BAD -- ', zipname

def check_gz(gzname):
  global Errors
  print 'checking ', gzname
  id = os.fork()
  if id == 0:
    os.execlp('gzip', '-q', '-t', gzname)
  (pid, stat) = os.wait()
  if stat != 0:
    Errors.append(gzname)
    print 'BAD -- ', gzname

def do_dir(dirname):
  files = os.listdir(dirname)
  for f in files:
    fullf = dirname + '/' + f
    if os.path.isdir(fullf):
      do_dir(fullf) # recurse on dirs
    else:
      (dummy, ext) = os.path.splitext(f)
      lower = ext.lower()
      if lower == '.zip':
        add_zip(fullf)


ZipFiles = {}
Errors = []
#do_dir('.')
for root, dirs, files in os.walk('.'):
  for f in files:
    (dummy, ext) = os.path.splitext(f)
    lower = ext.lower()
    if lower == '.gz' or lower == '.tgz':
      check_gz(root + '/' + f)
    elif lower == '.zip':
      check_zip(root + '/' + f)
      #add_zip(root + '/' + f)
  #print root, '::', dirs, '::', files

#print len(ZipFiles), ' zip files found -- checking them all'

for f in ZipFiles:
  check_zip(f)

print len(Errors), ' zip errors found.'
for e in Errors:
  print 'ERROR_IN ', e

